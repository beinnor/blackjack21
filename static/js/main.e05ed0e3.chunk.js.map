{"version":3,"sources":["helpers/states.js","components/Betting.js","components/Card.js","components/DealerHand.js","components/PlayerHand.js","components/Input.js","components/Output.js","helpers/misc.js","helpers/deck.js","components/App.js","index.js","assets/chips_sprite.svg","assets/svg-cards/svg-cards.svg"],"names":["GAMESTATE","BET","DEAL","CHECKWINNER","PLAYERTURN","DEALERTURN","DECLAREWINNER","GAMEOVER","WINNER","PLAYER","DEALER","TIE","BetArea","styled","div","GoldenCirle","span","GridChips","SvgChip","svg","SvgChipDisabled","Betting","props","enabledChips","onClick","handleClearBet","currentBet","e","handleChipsButtons","className","id","viewBox","href","chipsSprite","width","height","disabledChips","gameState","CardStyle","Card","card","hidden","cardsSprite","fill","suit","rank","GridDealerHand","Hand","currentCards","cards","map","key","name","GridPlayerHand","GridLeftButtons","GridRightButtons","HitButton","button","StandButton","DblDownButton","SplitButton","DealButton","NewRoundButton","Input","dealBtn","handleDealButton","hitBtn","handleHitButton","standBtn","handleStandButton","splitBtn","handleSplitButton","newRoundBtn","handleNewRoundButton","dblDownBtn","handleDblDownButton","buttonState","dealDisabled","hitDisabled","standDisabled","newRoundDisabled","splitDisabled","dblDownDisabled","GridCash","PointsStyle","GridDealerPoints","GridPlayerPoints","Output","dealerPoints","playerPoints","playerCash","calcScore","score","pointsArr1","pointsArr2","forEach","includes","parseInt","calcFullScore","length","suits","ranks","getDeck","deck","i","j","push","shuffle","input","temp_val","random_index","current_index","Math","floor","random","GridContainer","ReactDOM","render","useState","setDeck","dealerCards","setDealerCards","playerCards","setPlayerCards","setDealerPoints","setPlayerPoints","setPlayerCash","setCurrentBet","setButtonState","setGameState","winnerState","setWinnerState","message","setMessage","useEffect","console","log","secretDealerPoints","filter","tempDealerCards","tempDealerPoints","pop","inputProps","tempPlayerCards","firstDealerCard","tempPlayerPoints","outputProps","bettingProps","val","document","getElementById","module","exports"],"mappings":"qQAAaA,EAAY,CACvBC,IAAK,MACLC,KAAM,OACNC,YAAa,cACbC,WAAY,aACZC,WAAY,aACZC,cAAe,gBACfC,SAAU,YAGCC,EAAS,CACpBC,OAAQ,SACRC,OAAQ,SACRC,IAAK,O,kiCCNP,IAAMC,EAAUC,IAAOC,IAAV,KAOPC,EAAcF,IAAOG,KAAV,KAMXC,EAAYJ,IAAOC,IAAV,KAMTI,EAAUL,IAAOM,IAAV,KASPC,EAAkBP,IAAOM,IAAV,KAUN,SAASE,EAAQC,GAC9B,IAAMC,EACJ,oCACE,kBAACX,EAAD,CAASY,QAASF,EAAMG,gBACtB,kBAACV,EAAD,SAAeO,EAAMI,aAEvB,kBAACT,EAAD,KACE,kBAACC,EAAD,CACEM,QAAS,SAAAG,GAAC,OAAIL,EAAMM,mBAAmB,IACvCC,UAAU,OACVC,GAAG,SACHC,QAAQ,aAER,yBAAKC,KAAI,UAAKC,IAAL,WAA2BC,MAAM,OAAOC,OAAO,UAG1D,kBAACjB,EAAD,CACEM,QAAS,SAAAG,GAAC,OAAIL,EAAMM,mBAAmB,IACvCC,UAAU,OACVC,GAAG,SACHC,QAAQ,aAER,yBAAKC,KAAI,UAAKC,IAAL,WAA2BC,MAAM,OAAOC,OAAO,UAG1D,kBAACjB,EAAD,CACEM,QAAS,SAAAG,GAAC,OAAIL,EAAMM,mBAAmB,KACvCC,UAAU,OACVC,GAAG,UACHC,QAAQ,aAER,yBAAKC,KAAI,UAAKC,IAAL,YAA4BC,MAAM,OAAOC,OAAO,UAG3D,kBAACjB,EAAD,CACEM,QAAS,SAAAG,GAAC,OAAIL,EAAMM,mBAAmB,MACvCC,UAAU,OACVC,GAAG,WACHC,QAAQ,aAER,yBAAKC,KAAI,UAAKC,IAAL,aAA6BC,MAAM,OAAOC,OAAO,UAG5D,kBAACjB,EAAD,CACEM,QAAS,SAAAG,GAAC,OAAIL,EAAMM,mBAAmB,MACvCC,UAAU,OACVC,GAAG,WACHC,QAAQ,aAER,yBAAKC,KAAI,UAAKC,IAAL,aAA6BC,MAAM,OAAOC,OAAO,UAG5D,kBAACjB,EAAD,CACEM,QAAS,SAAAG,GAAC,OAAIL,EAAMM,mBAAmB,MACvCC,UAAU,OACVC,GAAG,YACHC,QAAQ,aAER,yBAAKC,KAAI,UAAKC,IAAL,cAA8BC,MAAM,OAAOC,OAAO,YAM7DC,EACJ,oCACE,kBAACxB,EAAD,KACE,kBAACG,EAAD,SAAeO,EAAMI,aAEvB,kBAACT,EAAD,KACE,kBAACG,EAAD,CAAiBS,UAAU,OAAOC,GAAG,SAASC,QAAQ,aACpD,yBAAKC,KAAI,UAAKC,IAAL,WAA2BC,MAAM,OAAOC,OAAO,UAG1D,kBAACf,EAAD,CAAiBS,UAAU,OAAOC,GAAG,SAASC,QAAQ,aACpD,yBAAKC,KAAI,UAAKC,IAAL,WAA2BC,MAAM,OAAOC,OAAO,UAG1D,kBAACf,EAAD,CAAiBS,UAAU,OAAOC,GAAG,UAAUC,QAAQ,aACrD,yBAAKC,KAAI,UAAKC,IAAL,YAA4BC,MAAM,OAAOC,OAAO,UAG3D,kBAACf,EAAD,CAAiBS,UAAU,OAAOC,GAAG,WAAWC,QAAQ,aACtD,yBAAKC,KAAI,UAAKC,IAAL,aAA6BC,MAAM,OAAOC,OAAO,UAG5D,kBAACf,EAAD,CAAiBS,UAAU,OAAOC,GAAG,WAAWC,QAAQ,aACtD,yBAAKC,KAAI,UAAKC,IAAL,aAA6BC,MAAM,OAAOC,OAAO,UAG5D,kBAACf,EAAD,CAAiBS,UAAU,OAAOC,GAAG,YAAYC,QAAQ,aACvD,yBAAKC,KAAI,UAAKC,IAAL,cAA8BC,MAAM,OAAOC,OAAO,YAMnE,OACE,oCAAGb,EAAMe,YAAcrC,EAAUC,IAAMsB,EAAea,G,gUC1I1D,IAAME,EAAYzB,IAAOM,IAAV,KASA,SAASoB,EAAKjB,GAC3B,OAAIA,EAAMkB,KAAKC,OAEX,kBAACH,EAAD,CAAWP,QAAQ,uBACjB,yBACEC,KAAI,UAAKU,IAAL,SACJR,MAAM,OACNC,OAAO,OACPQ,KAAK,aAMT,kBAACL,EAAD,CAAWT,UAAU,kBAAkBE,QAAQ,uBAC7C,yBACEC,KAAI,UAAKU,IAAL,YAAoBpB,EAAMkB,KAAKI,KAA/B,YAAuCtB,EAAMkB,KAAKK,MACtDX,MAAM,OACNC,OAAO,U,yHC5BjB,IAAMW,EAAiBjC,IAAOC,IAAV,KAKL,SAASiC,EAAT,GAA0B,IACjCC,EADgC,EAATC,MACFC,KAAI,SAAAV,GAAI,OAAI,kBAACD,EAAD,CAAMY,IAAKX,EAAKY,KAAMZ,KAAMA,OAEnE,OAAO,kBAACM,EAAD,KAAiBE,G,yHCR1B,IAAMK,EAAiBxC,IAAOC,IAAV,KAKL,SAASiC,EAAT,GAA0B,IACjCC,EADgC,EAATC,MACFC,KAAI,SAAAV,GAAI,OAAI,kBAACD,EAAD,CAAMY,IAAKX,EAAKY,KAAMZ,KAAMA,OAEnE,OAAO,kBAACa,EAAD,KAAiBL,G,u0BCT1B,IAAMM,EAAkBzC,IAAOC,IAAV,KAMfyC,EAAmB1C,IAAOC,IAAV,KAMhB0C,EAAY3C,IAAO4C,OAAV,KAGTC,EAAc7C,IAAO4C,OAAV,KAGXE,EAAgB9C,IAAO4C,OAAV,KAGbG,EAAc/C,IAAO4C,OAAV,KAGXI,EAAahD,IAAO4C,OAAV,KAIVK,EAAiBjD,IAAO4C,OAAV,KAIL,SAASM,EAAMzC,GAC5B,IAAM0C,EACJ,kBAACH,EAAD,CAAYrC,QAASF,EAAM2C,kBAA3B,QAEIC,EAAS,kBAACV,EAAD,CAAWhC,QAASF,EAAM6C,iBAA1B,OACTC,EACJ,kBAACV,EAAD,CAAalC,QAASF,EAAM+C,mBAA5B,SAEIC,EACJ,kBAACV,EAAD,CAAapC,QAASF,EAAMiD,mBAA5B,SAEIC,EACJ,kBAACV,EAAD,CAAgBtC,QAASF,EAAMmD,sBAA/B,aAIIC,EACJ,kBAACf,EAAD,CAAenC,QAASF,EAAMqD,qBAA9B,eAKF,OACE,oCACE,kBAACrB,EAAD,KACIhC,EAAMsD,YAAYC,aAAyB,KAAVb,EACjC1C,EAAMsD,YAAYE,YAAuB,KAATZ,EAChC5C,EAAMsD,YAAYG,cAA2B,KAAXX,EAClC9C,EAAMsD,YAAYI,iBAAiC,KAAdR,GAEzC,kBAACjB,EAAD,KACIjC,EAAMsD,YAAYK,cAA2B,KAAXX,EAClChD,EAAMsD,YAAYM,gBAA+B,KAAbR,I,s9BChE9C,IAAMS,GAAWtE,IAAOC,IAAV,MAORC,GAAcF,IAAOG,KAAV,MAMXoE,GAAcvE,IAAOG,KAAV,MAYXqE,GAAmBxE,IAAOC,IAAV,MAMhBwE,GAAmBzE,IAAOC,IAAV,MAMP,SAASyE,GAAT,GAKX,IAJFC,EAIC,EAJDA,aACAC,EAGC,EAHDA,aACAC,EAEC,EAFDA,WAEC,EADDhE,WAEA,OACE,oCACE,kBAACyD,GAAD,KACE,kBAAC,GAAD,SAAeO,IAEjB,kBAACL,GAAD,KACE,kBAACD,GAAD,KAAcI,IAEhB,kBAACF,GAAD,KACE,kBAACF,GAAD,KAAcK,KCvDf,IAAME,GAAY,SAAA1C,GACvB,IAAI2C,EAAQ,EACNC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACtDC,EAAa,CAAC,OAAQ,QAAS,QAiBrC,OAfA7C,EAAM8C,SAAQ,SAAAvD,GACPA,EAAKC,SACJoD,EAAWG,SAASxD,EAAKK,MAC3B+C,GAAgBK,SAASzD,EAAKK,MACrBiD,EAAWE,SAASxD,EAAKK,MAClC+C,GAAgB,GACO,MAAdpD,EAAKK,OAEZ+C,GADEA,EAAQ,IAAM,GACA,GAEA,OAKjBA,GAGIM,GAAgB,SAAAjD,GAC3B,IAAI2C,EAAQ,EACNC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACtDC,EAAa,CAAC,OAAQ,QAAS,QAiBrC,OAfI7C,EAAMkD,OAAS,GACjBlD,EAAM8C,SAAQ,SAAAvD,GACRqD,EAAWG,SAASxD,EAAKK,MAC3B+C,GAAgBK,SAASzD,EAAKK,MACrBiD,EAAWE,SAASxD,EAAKK,MAClC+C,GAAgB,GACO,MAAdpD,EAAKK,OAEZ+C,GADEA,EAAQ,IAAM,GACA,GAEA,MAKjBA,GC3CHQ,GAAQ,CAAC,QAAS,UAAW,OAAQ,SACrCC,GAAQ,CACZ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,OACA,QACA,QAGWC,GAAU,WAGrB,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAAIJ,GAAMD,OAAQK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,GAAMF,OAAQM,IAAK,CACrC,IAAIjE,EAAO,CACTY,KAAK,GAAD,OAAKiD,GAAMI,GAAX,eAAoBL,GAAMI,IAC9B3D,KAAMwD,GAAMI,GACZ7D,KAAMwD,GAAMI,GACZ/D,QAAQ,GAEV8D,EAAKG,KAAKlE,GAId,OAAO+D,GAyCII,GAAU,SAAAC,GAMrB,IALA,IAEIC,EACAC,EAHAP,EAAOK,EACPG,EAAgBR,EAAKJ,OAIlB,IAAMY,GACXD,EAAeE,KAAKC,MAAMD,KAAKE,SAAWH,GAE1CF,EAAWN,EADXQ,GAAiB,GAEjBR,EAAKQ,GAAiBR,EAAKO,GAC3BP,EAAKO,GAAgBD,EAEvB,OAAON,G,mYCzET,IAAMY,GAAgBtG,IAAOC,IAAV,MCRnBsG,IAASC,OAAO,mBDgBD,WAAgB,IAAD,EACJC,mBAASX,GAAQL,OADb,mBACrBC,EADqB,KACfgB,EADe,OAEUD,mBAAS,IAFnB,mBAErBE,EAFqB,KAERC,EAFQ,OAGUH,mBAAS,IAHnB,mBAGrBI,EAHqB,KAGRC,EAHQ,OAIYL,mBAAS,GAJrB,mBAIrB9B,EAJqB,KAIPoC,EAJO,OAKYN,mBAAS,GALrB,mBAKrB7B,EALqB,KAKPoC,EALO,OAMQP,mBAAS,KANjB,mBAMrB5B,EANqB,KAMToC,EANS,OAOQR,mBAAS,GAPjB,mBAOrB5F,EAPqB,KAOTqG,EAPS,OAQUT,mBAAS,CAC7CzC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfE,eAAe,EACfC,iBAAiB,EACjBF,kBAAkB,IAdQ,mBAQrBJ,EARqB,KAQRoD,EARQ,OAiBMV,mBAAStH,EAAUC,KAjBzB,mBAiBrBoC,EAjBqB,KAiBV4F,EAjBU,OAmBUX,mBAAS,MAnBnB,mBAmBrBY,EAnBqB,KAmBRC,EAnBQ,OAoBEb,mBAAS,IApBX,mBAoBrBc,EApBqB,KAoBZC,EApBY,KAsB5BC,qBAAU,WACRC,QAAQC,IAAR,mBAAwBJ,MACvB,CAACA,IAGJE,qBAAU,WACR,GAAIjG,IAAcrC,EAAUG,YAAa,CACvC,IAAIsI,EAAqBvC,GAAcsB,GAElB,KAAjB/B,GAA8C,KAAvBgD,GACzBR,EAAajI,EAAUM,eACvBsH,EAAgBa,GAChBN,EAAe3H,EAAOG,MACI,KAAjB8E,GACTwC,EAAajI,EAAUM,eACvBsH,EAAgBa,GAChBN,EAAe3H,EAAOC,SACU,KAAvBgI,GACTR,EAAajI,EAAUM,eACvBsH,EAAgBa,GAChBN,EAAe3H,EAAOE,UAEtBuH,EAAajI,EAAUI,YACvB4H,EAAe,CACbnD,cAAc,EACdC,aAAa,EACbC,eAAe,EACfE,eAAe,EACfC,iBAAiB,EACjBF,kBAAkB,QAIvB,CAAC3C,EAAWoD,EAAcD,EAAc2C,EAAgBX,IAE3Dc,qBAAU,WACJjG,IAAcrC,EAAUM,gBAC1BkH,EAAYkB,QAAO,SAAAlG,GAIjB,OAHoB,IAAhBA,EAAKC,SACPD,EAAKC,QAAS,GAETD,KAETiF,EAAe,YAAID,IAEfU,IAAgB1H,EAAOE,QACzB2H,EAAW,eAETH,IAAgB1H,EAAOC,QACzB4H,EAAW,eAETH,IAAgB1H,EAAOG,KACzB0H,EAAW,OAEbJ,EAAajI,EAAUO,UACvByH,EAAe,CACbnD,cAAc,EACdC,aAAa,EACbC,eAAe,EACfE,eAAe,EACfC,iBAAiB,EACjBF,kBAAkB,OAGrB,CAAC3C,EAAW6F,EAAaV,IAE5Bc,qBAAU,WACR,GAAIjG,IAAcrC,EAAUK,WAAY,CAItC,IAHA,IAAIsI,EAAkBnB,EAClBoB,EAAmB1C,GAAcyC,GAE9BC,EAAmB,IACxBD,EAAgBjC,KAAKH,EAAKsC,OAE1BD,EAAmB1C,GAAcyC,GAEnClB,EAAekB,GACff,EAAgBgB,GACZA,EAAmB,GACrBT,EAAe3H,EAAOC,QACbmI,EAAmBnD,EAC5B0C,EAAe3H,EAAOE,QACbkI,EAAmBnD,EAC5B0C,EAAe3H,EAAOC,QACbmI,IAAqBnD,GAC9B0C,EAAe3H,EAAOG,KAGxBsH,EAAajI,EAAUM,kBAExB,CAAC+B,EAAWmF,EAAajB,EAAMd,IAElC,IAwHMqD,GAAa,CACjBlE,cACAX,iBA1HuB,WACvBgE,EAAajI,EAAUE,MACvB8H,EAAe,CACbnD,cAAc,EACdC,aAAa,EACbC,eAAe,EACfE,eAAe,EACfC,iBAAiB,EACjBF,kBAAkB,IAGpB,IAAI2D,EAAkB,GAClBI,EAAkB,GAElBC,EAAkBzC,EAAKsC,MAC3BG,EAAgBvG,QAAS,EAEzBkG,EAAgBjC,KAAKsC,GACrBD,EAAgBrC,KAAKH,EAAKsC,OAC1BF,EAAgBjC,KAAKH,EAAKsC,OAC1BE,EAAgBrC,KAAKH,EAAKsC,OAE1BpB,EAAekB,GACfhB,EAAeoB,GAEf,IAAMH,EAAmBjD,GAAUgD,GAC7BM,EAAmBtD,GAAUoD,GACnCnB,EAAgBgB,GAChBf,EAAgBoB,GAEhBhB,EAAajI,EAAUG,cA6FvBgE,gBA1FsB,WACtB,IAAI4E,EAAkBrB,EAEtBqB,EAAgBrC,KAAKH,EAAKsC,OAE1BlB,EAAeoB,GAEf,IAAME,EAAmBtD,GAAUoD,GAEnClB,EAAgBoB,GAEZA,EAAmB,KACrBhB,EAAajI,EAAUM,eACvB6H,EAAe3H,EAAOE,QACtBsH,EAAe,CACbnD,cAAc,EACdC,aAAa,EACbC,eAAe,EACfE,eAAe,EACfC,iBAAiB,EACjBF,kBAAkB,MAuEtBX,kBAlEwB,WACxB4D,EAAajI,EAAUK,YACvB2H,EAAe,CACbnD,cAAc,EACdC,aAAa,EACbC,eAAe,EACfE,eAAe,EACfC,iBAAiB,EACjBF,kBAAkB,KA2DpBT,kBAvDwB,aAwDxBI,oBAtD0B,aAuD1BF,qBArD2B,WAC3B,OAAQyD,GACN,KAAK1H,EAAOE,OAEV,MACF,KAAKF,EAAOC,OACVqH,EAAcpC,EAA0B,EAAbhE,GAC3B,MACF,KAAKlB,EAAOG,IACVmH,EAAcpC,EAAahE,GAM/B6F,EAAQZ,GAAQL,OAChBmB,EAAe,IACfE,EAAe,IACfC,EAAgB,GAChBC,EAAgB,GAChBE,EAAc,GACdC,EAAe,CACbnD,cAAc,EACdC,aAAa,EACbC,eAAe,EACfE,eAAe,EACfC,iBAAiB,EACjBF,kBAAkB,IAEpBmD,EAAe,MACfE,EAAW,IACXJ,EAAajI,EAAUC,OAyBnBiJ,GAAc,CAClB1D,eACAC,eACAC,cAEIyD,GAAe,CACnBvH,mBA5ByB,SAAAwH,GACrB1D,GAAc0D,IAChBrB,EAAcrG,EAAa0H,GAC3BtB,EAAcpC,EAAa0D,KA0B7B3H,eAtBqB,WACrBqG,EAAcpC,EAAahE,GAC3BqG,EAAc,IAqBdrG,aACAW,aAEF,OACE,oCACE,kBAAC8E,GAAD,KACE,kBAAC9F,EAAY8H,IACb,kBAACpF,EAAU+E,IACX,kBAACvD,GAAW2D,IACZ,kBAAC,EAAD,CAAYjG,MAAOuE,IACnB,kBAAC,EAAD,CAAYvE,MAAOyE,QCtRX,MAAS2B,SAASC,eAAe,U,kBCLjDC,EAAOC,QAAU,IAA0B,0C,kBCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.e05ed0e3.chunk.js","sourcesContent":["export const GAMESTATE = {\n  BET: 'BET',\n  DEAL: 'DEAL',\n  CHECKWINNER: 'CHECKWINNER',\n  PLAYERTURN: 'PLAYERTURN',\n  DEALERTURN: 'DEALERTURN',\n  DECLAREWINNER: 'DECLAREWINNER',\n  GAMEOVER: 'GAMEOVER',\n};\n\nexport const WINNER = {\n  PLAYER: 'PLAYER',\n  DEALER: 'DEALER',\n  TIE: 'TIE',\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport chipsSprite from '../assets/chips_sprite.svg';\n\nimport { GAMESTATE } from '../helpers/states';\n\nconst BetArea = styled.div`\n  grid-area: betArea;\n  justify-self: center;\n  align-self: center;\n  font-size: 2rem;\n`;\n\nconst GoldenCirle = styled.span`\n  padding: 2rem;\n  border-radius: 1rem;\n  border: 0.2rem solid gold;\n`;\n\nconst GridChips = styled.div`\n  grid-area: chips;\n  justify-self: center;\n  align-self: center;\n`;\n\nconst SvgChip = styled.svg`\n  width: 5rem;\n  height: 5rem;\n  border-radius: 2.5rem;\n  -webkit-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n`;\n\nconst SvgChipDisabled = styled.svg`\n  fill: grey;\n  width: 5rem;\n  height: 5rem;\n  border-radius: 2.5rem;\n  -webkit-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n`;\n\nexport default function Betting(props) {\n  const enabledChips = (\n    <>\n      <BetArea onClick={props.handleClearBet}>\n        <GoldenCirle>${props.currentBet}</GoldenCirle>\n      </BetArea>\n      <GridChips>\n        <SvgChip\n          onClick={e => props.handleChipsButtons(1)}\n          className=\"chip\"\n          id=\"chip_1\"\n          viewBox=\"0 0 50 50\"\n        >\n          <use href={`${chipsSprite}#chip_1`} width=\"100%\" height=\"100%\" />\n        </SvgChip>\n\n        <SvgChip\n          onClick={e => props.handleChipsButtons(5)}\n          className=\"chip\"\n          id=\"chip_5\"\n          viewBox=\"0 0 50 50\"\n        >\n          <use href={`${chipsSprite}#chip_5`} width=\"100%\" height=\"100%\" />\n        </SvgChip>\n\n        <SvgChip\n          onClick={e => props.handleChipsButtons(25)}\n          className=\"chip\"\n          id=\"chip_25\"\n          viewBox=\"0 0 50 50\"\n        >\n          <use href={`${chipsSprite}#chip_25`} width=\"100%\" height=\"100%\" />\n        </SvgChip>\n\n        <SvgChip\n          onClick={e => props.handleChipsButtons(100)}\n          className=\"chip\"\n          id=\"chip_100\"\n          viewBox=\"0 0 50 50\"\n        >\n          <use href={`${chipsSprite}#chip_100`} width=\"100%\" height=\"100%\" />\n        </SvgChip>\n\n        <SvgChip\n          onClick={e => props.handleChipsButtons(500)}\n          className=\"chip\"\n          id=\"chip_500\"\n          viewBox=\"0 0 50 50\"\n        >\n          <use href={`${chipsSprite}#chip_500`} width=\"100%\" height=\"100%\" />\n        </SvgChip>\n\n        <SvgChip\n          onClick={e => props.handleChipsButtons(1000)}\n          className=\"chip\"\n          id=\"chip_1000\"\n          viewBox=\"0 0 50 50\"\n        >\n          <use href={`${chipsSprite}#chip_1000`} width=\"100%\" height=\"100%\" />\n        </SvgChip>\n      </GridChips>\n    </>\n  );\n\n  const disabledChips = (\n    <>\n      <BetArea>\n        <GoldenCirle>${props.currentBet}</GoldenCirle>\n      </BetArea>\n      <GridChips>\n        <SvgChipDisabled className=\"chip\" id=\"chip_1\" viewBox=\"0 0 50 50\">\n          <use href={`${chipsSprite}#chip_1`} width=\"100%\" height=\"100%\" />\n        </SvgChipDisabled>\n\n        <SvgChipDisabled className=\"chip\" id=\"chip_5\" viewBox=\"0 0 50 50\">\n          <use href={`${chipsSprite}#chip_5`} width=\"100%\" height=\"100%\" />\n        </SvgChipDisabled>\n\n        <SvgChipDisabled className=\"chip\" id=\"chip_25\" viewBox=\"0 0 50 50\">\n          <use href={`${chipsSprite}#chip_25`} width=\"100%\" height=\"100%\" />\n        </SvgChipDisabled>\n\n        <SvgChipDisabled className=\"chip\" id=\"chip_100\" viewBox=\"0 0 50 50\">\n          <use href={`${chipsSprite}#chip_100`} width=\"100%\" height=\"100%\" />\n        </SvgChipDisabled>\n\n        <SvgChipDisabled className=\"chip\" id=\"chip_500\" viewBox=\"0 0 50 50\">\n          <use href={`${chipsSprite}#chip_500`} width=\"100%\" height=\"100%\" />\n        </SvgChipDisabled>\n\n        <SvgChipDisabled className=\"chip\" id=\"chip_1000\" viewBox=\"0 0 50 50\">\n          <use href={`${chipsSprite}#chip_1000`} width=\"100%\" height=\"100%\" />\n        </SvgChipDisabled>\n      </GridChips>\n    </>\n  );\n\n  return (\n    <>{props.gameState === GAMESTATE.BET ? enabledChips : disabledChips}</>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport cardsSprite from '../assets/svg-cards/svg-cards.svg';\n\nconst CardStyle = styled.svg`\n  width: auto;\n  height: 11rem;\n  border-radius: 0.3rem;\n  -webkit-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n`;\n\nexport default function Card(props) {\n  if (props.card.hidden) {\n    return (\n      <CardStyle viewBox=\"0 0 169.075 244.640\">\n        <use\n          href={`${cardsSprite}#back`}\n          width=\"100%\"\n          height=\"100%\"\n          fill=\"darkred\"\n        />\n      </CardStyle>\n    );\n  } else {\n    return (\n      <CardStyle className=\"card dealerCard\" viewBox=\"0 0 169.075 244.640\">\n        <use\n          href={`${cardsSprite}#${props.card.suit}_${props.card.rank}`}\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </CardStyle>\n    );\n  }\n}\n","import React from 'react';\nimport Card from './Card';\nimport styled from 'styled-components';\n\nconst GridDealerHand = styled.div`\n  grid-area: dealerCards;\n  align-self: center;\n`;\n\nexport default function Hand({ cards }) {\n  const currentCards = cards.map(card => <Card key={card.name} card={card} />);\n\n  return <GridDealerHand>{currentCards}</GridDealerHand>;\n}\n","import React from 'react';\nimport Card from './Card';\nimport styled from 'styled-components';\n\nconst GridPlayerHand = styled.div`\n  grid-area: playerCards;\n  align-self: center;\n`;\n\nexport default function Hand({ cards }) {\n  const currentCards = cards.map(card => <Card key={card.name} card={card} />);\n\n  return <GridPlayerHand>{currentCards}</GridPlayerHand>;\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst GridLeftButtons = styled.div`\n  grid-area: leftButtons;\n  justify-self: center;\n  align-self: center;\n`;\n\nconst GridRightButtons = styled.div`\n  grid-area: rightButtons;\n  justify-self: center;\n  align-self: center;\n`;\n\nconst HitButton = styled.button`\n  font-size: 2rem;\n`;\nconst StandButton = styled.button`\n  font-size: 2rem;\n`;\nconst DblDownButton = styled.button`\n  font-size: 2rem;\n`;\nconst SplitButton = styled.button`\n  font-size: 2rem;\n`;\nconst DealButton = styled.button`\n  font-size: 2rem;\n`;\n\nconst NewRoundButton = styled.button`\n  font-size: 2rem;\n`;\n\nexport default function Input(props) {\n  const dealBtn = (\n    <DealButton onClick={props.handleDealButton}>Deal</DealButton>\n  );\n  const hitBtn = <HitButton onClick={props.handleHitButton}>Hit</HitButton>;\n  const standBtn = (\n    <StandButton onClick={props.handleStandButton}>Stand</StandButton>\n  );\n  const splitBtn = (\n    <SplitButton onClick={props.handleSplitButton}>Split</SplitButton>\n  );\n  const newRoundBtn = (\n    <NewRoundButton onClick={props.handleNewRoundButton}>\n      New Round\n    </NewRoundButton>\n  );\n  const dblDownBtn = (\n    <DblDownButton onClick={props.handleDblDownButton}>\n      Double Down\n    </DblDownButton>\n  );\n\n  return (\n    <>\n      <GridLeftButtons>\n        {!props.buttonState.dealDisabled ? dealBtn : null}\n        {!props.buttonState.hitDisabled ? hitBtn : null}\n        {!props.buttonState.standDisabled ? standBtn : null}\n        {!props.buttonState.newRoundDisabled ? newRoundBtn : null}\n      </GridLeftButtons>\n      <GridRightButtons>\n        {!props.buttonState.splitDisabled ? splitBtn : null}\n        {!props.buttonState.dblDownDisabled ? dblDownBtn : null}\n      </GridRightButtons>\n    </>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst GridCash = styled.div`\n  grid-area: cash;\n  justify-self: center;\n  align-self: center;\n  font-size: 2rem;\n`;\n\nconst GoldenCirle = styled.span`\n  padding: 2rem;\n  border-radius: 1rem;\n  border: 0.2rem solid gold;\n`;\n\nconst PointsStyle = styled.span`\n  background: grey;\n  color: darkred;\n  font-size: 2rem;\n  padding: 0.9rem;\n  border: 0.15rem solid black;\n  border-radius: 2rem;\n  -webkit-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n`;\n\nconst GridDealerPoints = styled.div`\n  grid-area: dealerPoints;\n  justify-self: center;\n  align-self: center;\n`;\n\nconst GridPlayerPoints = styled.div`\n  grid-area: playerPoints;\n  justify-self: center;\n  align-self: center;\n`;\n\nexport default function Output({\n  dealerPoints,\n  playerPoints,\n  playerCash,\n  currentBet,\n}) {\n  return (\n    <>\n      <GridCash>\n        <GoldenCirle>${playerCash}</GoldenCirle>\n      </GridCash>\n      <GridDealerPoints>\n        <PointsStyle>{dealerPoints}</PointsStyle>\n      </GridDealerPoints>\n      <GridPlayerPoints>\n        <PointsStyle>{playerPoints}</PointsStyle>\n      </GridPlayerPoints>\n    </>\n  );\n}\n","export const calcScore = cards => {\n  let score = 0;\n  const pointsArr1 = ['2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  const pointsArr2 = ['jack', 'queen', 'king'];\n\n  cards.forEach(card => {\n    if (!card.hidden) {\n      if (pointsArr1.includes(card.rank)) {\n        score = score + parseInt(card.rank);\n      } else if (pointsArr2.includes(card.rank)) {\n        score = score + 10;\n      } else if (card.rank === '1') {\n        if (score + 11 <= 21) {\n          score = score + 11;\n        } else {\n          score = score + 1;\n        }\n      }\n    }\n  });\n  return score;\n};\n\nexport const calcFullScore = cards => {\n  let score = 0;\n  const pointsArr1 = ['2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  const pointsArr2 = ['jack', 'queen', 'king'];\n\n  if (cards.length > 1) {\n    cards.forEach(card => {\n      if (pointsArr1.includes(card.rank)) {\n        score = score + parseInt(card.rank);\n      } else if (pointsArr2.includes(card.rank)) {\n        score = score + 10;\n      } else if (card.rank === '1') {\n        if (score + 11 <= 21) {\n          score = score + 11;\n        } else {\n          score = score + 1;\n        }\n      }\n    });\n  }\n  return score;\n};\n\nexport const isBust = points => {\n  if (points > 21) {\n    return true;\n  }\n  return false;\n};\n","const suits = ['spade', 'diamond', 'club', 'heart'];\nconst ranks = [\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  'jack',\n  'queen',\n  'king',\n];\n\nexport const getDeck = () => {\n  const deck = [];\n\n  for (let i = 0; i < suits.length; i++) {\n    for (let j = 0; j < ranks.length; j++) {\n      let card = {\n        name: `${ranks[j]} of ${suits[i]}`,\n        rank: ranks[j],\n        suit: suits[i],\n        hidden: false,\n      };\n      deck.push(card);\n    }\n  }\n\n  return deck;\n};\n\nexport const getCheatDeck = () => {\n  const deck = [];\n\n  const card1 = {\n    name: `A of ♠`,\n    rank: 'A',\n    suit: '♠',\n    hidden: false,\n  };\n  deck.push(card1);\n\n  const card3 = {\n    name: `A of ♣`,\n    rank: 'A',\n    suit: '♣',\n    hidden: false,\n  };\n  deck.push(card3);\n\n  const card2 = {\n    name: `K of ♠`,\n    rank: 'K',\n    suit: '♠',\n    hidden: false,\n  };\n  deck.push(card2);\n\n  const card4 = {\n    name: `Q of ♣`,\n    rank: 'Q',\n    suit: '♣',\n    hidden: false,\n  };\n  deck.push(card4);\n\n  return deck;\n};\n\nexport const shuffle = input => {\n  let deck = input;\n  let current_index = deck.length;\n  let temp_val;\n  let random_index;\n\n  while (0 !== current_index) {\n    random_index = Math.floor(Math.random() * current_index);\n    current_index -= 1;\n    temp_val = deck[current_index];\n    deck[current_index] = deck[random_index];\n    deck[random_index] = temp_val;\n  }\n  return deck;\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport Betting from './Betting';\nimport DealerHand from './DealerHand';\nimport PlayerHand from './PlayerHand';\nimport Input from './Input';\nimport Output from './Output';\n\nimport { calcScore, calcFullScore } from '../helpers/misc';\nimport { getDeck, shuffle } from '../helpers/deck';\nimport { GAMESTATE, WINNER } from '../helpers/states';\n\nconst GridContainer = styled.div`\n  height: 100vh;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr 1fr;\n  grid-template-areas: 'dealerPoints dealerCards dealerCards dealerCards' 'playerPoints playerCards playerCards playerCards' 'leftButtons betArea betArea rightButtons' 'chips chips chips cash';\n`;\n\nexport default function App() {\n  const [deck, setDeck] = useState(shuffle(getDeck()));\n  const [dealerCards, setDealerCards] = useState([]);\n  const [playerCards, setPlayerCards] = useState([]);\n  const [dealerPoints, setDealerPoints] = useState(0);\n  const [playerPoints, setPlayerPoints] = useState(0);\n  const [playerCash, setPlayerCash] = useState(100);\n  const [currentBet, setCurrentBet] = useState(0);\n  const [buttonState, setButtonState] = useState({\n    dealDisabled: false,\n    hitDisabled: true,\n    standDisabled: true,\n    splitDisabled: true,\n    dblDownDisabled: true,\n    newRoundDisabled: true,\n  });\n\n  const [gameState, setGameState] = useState(GAMESTATE.BET);\n\n  const [winnerState, setWinnerState] = useState(null);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    console.log(`Message: ${message}`);\n  }, [message]);\n\n  // Check for naturals, e.g. dealer or player has 21 on first deal\n  useEffect(() => {\n    if (gameState === GAMESTATE.CHECKWINNER) {\n      let secretDealerPoints = calcFullScore(dealerCards);\n\n      if (playerPoints === 21 && secretDealerPoints === 21) {\n        setGameState(GAMESTATE.DECLAREWINNER);\n        setDealerPoints(secretDealerPoints);\n        setWinnerState(WINNER.TIE);\n      } else if (playerPoints === 21) {\n        setGameState(GAMESTATE.DECLAREWINNER);\n        setDealerPoints(secretDealerPoints);\n        setWinnerState(WINNER.PLAYER);\n      } else if (secretDealerPoints === 21) {\n        setGameState(GAMESTATE.DECLAREWINNER);\n        setDealerPoints(secretDealerPoints);\n        setWinnerState(WINNER.DEALER);\n      } else {\n        setGameState(GAMESTATE.PLAYERTURN);\n        setButtonState({\n          dealDisabled: true,\n          hitDisabled: false,\n          standDisabled: false,\n          splitDisabled: true,\n          dblDownDisabled: true,\n          newRoundDisabled: true,\n        });\n      }\n    }\n  }, [gameState, playerPoints, dealerPoints, setWinnerState, dealerCards]);\n\n  useEffect(() => {\n    if (gameState === GAMESTATE.DECLAREWINNER) {\n      dealerCards.filter(card => {\n        if (card.hidden === true) {\n          card.hidden = false;\n        }\n        return card;\n      });\n      setDealerCards([...dealerCards]);\n\n      if (winnerState === WINNER.DEALER) {\n        setMessage('PLAYER BUST');\n      }\n      if (winnerState === WINNER.PLAYER) {\n        setMessage('DEALER BUST');\n      }\n      if (winnerState === WINNER.TIE) {\n        setMessage('TIE');\n      }\n      setGameState(GAMESTATE.GAMEOVER);\n      setButtonState({\n        dealDisabled: true,\n        hitDisabled: true,\n        standDisabled: true,\n        splitDisabled: true,\n        dblDownDisabled: true,\n        newRoundDisabled: false,\n      });\n    }\n  }, [gameState, winnerState, dealerCards]);\n\n  useEffect(() => {\n    if (gameState === GAMESTATE.DEALERTURN) {\n      let tempDealerCards = dealerCards;\n      let tempDealerPoints = calcFullScore(tempDealerCards);\n\n      while (tempDealerPoints < 17) {\n        tempDealerCards.push(deck.pop());\n        // TODO: legg til forsinkelse her eller noe.\n        tempDealerPoints = calcFullScore(tempDealerCards);\n      }\n      setDealerCards(tempDealerCards);\n      setDealerPoints(tempDealerPoints);\n      if (tempDealerPoints > 21) {\n        setWinnerState(WINNER.PLAYER);\n      } else if (tempDealerPoints > playerPoints) {\n        setWinnerState(WINNER.DEALER);\n      } else if (tempDealerPoints < playerPoints) {\n        setWinnerState(WINNER.PLAYER);\n      } else if (tempDealerPoints === playerPoints) {\n        setWinnerState(WINNER.TIE);\n      }\n\n      setGameState(GAMESTATE.DECLAREWINNER);\n    }\n  }, [gameState, dealerCards, deck, playerPoints]);\n\n  const handleDealButton = () => {\n    setGameState(GAMESTATE.DEAL);\n    setButtonState({\n      dealDisabled: false,\n      hitDisabled: true,\n      standDisabled: true,\n      splitDisabled: true,\n      dblDownDisabled: true,\n      newRoundDisabled: true,\n    });\n\n    let tempDealerCards = [];\n    let tempPlayerCards = [];\n\n    let firstDealerCard = deck.pop();\n    firstDealerCard.hidden = true;\n\n    tempDealerCards.push(firstDealerCard);\n    tempPlayerCards.push(deck.pop());\n    tempDealerCards.push(deck.pop());\n    tempPlayerCards.push(deck.pop());\n\n    setDealerCards(tempDealerCards);\n    setPlayerCards(tempPlayerCards);\n\n    const tempDealerPoints = calcScore(tempDealerCards);\n    const tempPlayerPoints = calcScore(tempPlayerCards);\n    setDealerPoints(tempDealerPoints);\n    setPlayerPoints(tempPlayerPoints);\n\n    setGameState(GAMESTATE.CHECKWINNER);\n  };\n\n  const handleHitButton = () => {\n    let tempPlayerCards = playerCards;\n\n    tempPlayerCards.push(deck.pop());\n\n    setPlayerCards(tempPlayerCards);\n\n    const tempPlayerPoints = calcScore(tempPlayerCards);\n\n    setPlayerPoints(tempPlayerPoints);\n\n    if (tempPlayerPoints > 21) {\n      setGameState(GAMESTATE.DECLAREWINNER);\n      setWinnerState(WINNER.DEALER);\n      setButtonState({\n        dealDisabled: true,\n        hitDisabled: true,\n        standDisabled: true,\n        splitDisabled: true,\n        dblDownDisabled: true,\n        newRoundDisabled: false,\n      });\n    }\n  };\n\n  const handleStandButton = () => {\n    setGameState(GAMESTATE.DEALERTURN);\n    setButtonState({\n      dealDisabled: true,\n      hitDisabled: true,\n      standDisabled: true,\n      splitDisabled: true,\n      dblDownDisabled: true,\n      newRoundDisabled: true,\n    });\n  };\n\n  const handleSplitButton = () => {};\n\n  const handleDblDownButton = () => {};\n\n  const handleNewRoundButton = () => {\n    switch (winnerState) {\n      case WINNER.DEALER:\n        // nothing happens, player just looses bet\n        break;\n      case WINNER.PLAYER:\n        setPlayerCash(playerCash + currentBet * 2);\n        break;\n      case WINNER.TIE:\n        setPlayerCash(playerCash + currentBet);\n        break;\n      default:\n        break;\n    }\n\n    setDeck(shuffle(getDeck()));\n    setDealerCards([]);\n    setPlayerCards([]);\n    setDealerPoints(0);\n    setPlayerPoints(0);\n    setCurrentBet(0);\n    setButtonState({\n      dealDisabled: false,\n      hitDisabled: true,\n      standDisabled: true,\n      splitDisabled: true,\n      dblDownDisabled: true,\n      newRoundDisabled: true,\n    });\n    setWinnerState(null);\n    setMessage('');\n    setGameState(GAMESTATE.BET);\n  };\n\n  const handleChipsButtons = val => {\n    if (playerCash >= val) {\n      setCurrentBet(currentBet + val);\n      setPlayerCash(playerCash - val);\n    }\n  };\n\n  const handleClearBet = () => {\n    setPlayerCash(playerCash + currentBet);\n    setCurrentBet(0);\n  };\n\n  const inputProps = {\n    buttonState,\n    handleDealButton,\n    handleHitButton,\n    handleStandButton,\n    handleSplitButton,\n    handleDblDownButton,\n    handleNewRoundButton,\n  };\n\n  const outputProps = {\n    dealerPoints,\n    playerPoints,\n    playerCash,\n  };\n  const bettingProps = {\n    handleChipsButtons,\n    handleClearBet,\n    currentBet,\n    gameState,\n  };\n  return (\n    <>\n      <GridContainer>\n        <Betting {...bettingProps} />\n        <Input {...inputProps} />\n        <Output {...outputProps} />\n        <DealerHand cards={dealerCards} />\n        <PlayerHand cards={playerCards} />\n      </GridContainer>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/chips_sprite.0d425635.svg\";","module.exports = __webpack_public_path__ + \"static/media/svg-cards.ee03ae14.svg\";"],"sourceRoot":""}